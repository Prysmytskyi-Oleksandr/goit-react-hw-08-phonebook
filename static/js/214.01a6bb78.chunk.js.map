{"version":3,"file":"static/js/214.01a6bb78.chunk.js","mappings":"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","sources":["components/Form/InitialState.jsx","webpack://react-homework-template/./src/components/Form/form.module.css?cfaa","components/Form/Form.jsx","redux/filter/filterSelector.js","webpack://react-homework-template/./src/components/Filter/filter.module.css?e01c","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/ContactList/contactList.module.css?ddc0","components/ContactList/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","page/ContactsPage/ContactsPage.jsx"],"sourcesContent":["let initialState = {\n  name: '',\n  number: '',\n};\nexport default initialState;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"form_form__v9NsD\",\"btn_form\":\"form_btn_form__fNy-R\"};","import { useSelector, useDispatch } from 'react-redux';\nimport initialState from './InitialState';\nimport styles from './form.module.css';\n\nimport { fetchAddContact } from 'redux/contacts/contactsOperations';\n\nexport const Form = () => {\n  const contacts = useSelector(store => store.contacts.items);\n  const dispatch = useDispatch();\n\n  const handleChange = event => {\n    initialState[event.target.name] = event.target.value;\n    console.log(event.target.value);\n    return;\n  };\n\n  const onAddContact = data => {\n    const name = data.name;\n    if (contacts.find(contact => contact.name === name)) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n\n    const number = data.number;\n    const action = fetchAddContact({ name, number });\n    dispatch(action);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    onAddContact(initialState);\n    event.target.reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={styles.form}>\n      <label>Name</label>\n      <input\n        type=\"text\"\n        name=\"name\"\n        placeholder=\"Enter the name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        onChange={handleChange}\n      />\n\n      <label>Number</label>\n      <input\n        type=\"tel\"\n        name=\"number\"\n        placeholder=\"Enter the number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        onChange={handleChange}\n      />\n\n      <button type=\"submit\" className={styles.btn_form}>\n        Add contact\n      </button>\n    </form>\n  );\n};\n","export const getFilter = ({ filter }) => filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"filter_filter__HJEMj\"};","import { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/filter/filterSlice';\nimport { getFilter } from 'redux/filter/filterSelector';\nimport styles from './filter.module.css';\n\nconst Filter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const handleFilter = event => {\n    const action = setFilter(event.target.value);\n    dispatch(action);\n  };\n\n  return (\n    <>\n      <label className={styles.filter}>\n        Find contact by name\n        <input type=\"text\" value={filter} onChange={handleFilter} />\n      </label>\n    </>\n  );\n};\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"contactList_list__R0BG5\",\"contact_item\":\"contactList_contact_item__vjYhh\",\"button\":\"contactList_button__twtQb\"};","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\n\nimport { fetchDeleteContact } from 'redux/contacts/contactsOperations';\n\nimport styles from '../contactList.module.css';\n\nconst ContactItem = ({ name, number, nameId }) => {\n  const dispatch = useDispatch();\n\n  const handleDeleteContact = id => {\n    const action = fetchDeleteContact(id);\n    dispatch(action);\n  };\n\n  return (\n    <li className={styles.contact_item}>\n      <p>\n        {name}: {number}\n      </p>\n\n      <button\n        className={styles.button}\n        type=\"button\"\n        onClick={() => handleDeleteContact(nameId)}\n      >\n        Delete\n      </button>\n    </li>\n  );\n};\n\nContactItem.propTypes = {\n  nameId: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  phone: PropTypes.string.isRequired,\n};\n\nexport default ContactItem;\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchAllContacts } from 'redux/contacts/contactsOperations';\nimport ContactItem from './ContactItem/ContactItem';\nimport styles from './contactList.module.css';\n\nconst ContactList = () => {\n  const contacts = useSelector(store => store.contacts.items);\n  const filter = useSelector(store => store.filter);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchAllContacts());\n  }, [dispatch]);\n\n  const filterContacts = () => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  const listContactsByFilter = filterContacts();\n\n  return (\n    <ol className={styles.list}>\n      {listContactsByFilter.map(({ id, name, number }) => {\n        return <ContactItem key={id} name={name} number={number} nameId={id} />;\n      })}\n    </ol>\n  );\n};\n\nexport default ContactList;\n","import { Form } from 'components/Form/Form';\nimport Filter from 'components/Filter/Filter';\nimport ContactList from 'components/ContactList/ContactList';\n\nconst ContactsPage = () => {\n  return (\n    <div>\n      <Form />\n      <Filter />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["name","number","Form","contacts","useSelector","store","items","dispatch","useDispatch","handleChange","event","initialState","target","value","console","log","onSubmit","preventDefault","data","find","contact","alert","action","fetchAddContact","onAddContact","reset","className","styles","type","placeholder","pattern","title","required","onChange","getFilter","filter","setFilter","nameId","onClick","id","fetchDeleteContact","handleDeleteContact","useEffect","fetchAllContacts","listContactsByFilter","toLowerCase","includes","map"],"sourceRoot":""}