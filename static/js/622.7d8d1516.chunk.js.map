{"version":3,"file":"static/js/622.7d8d1516.chunk.js","mappings":"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","sources":["components/Form/InitialState.jsx","components/RegisterForm/fields.jsx","components/RegisterForm/RegisterForm.jsx","page/RegisterPage/RegisterPage.jsx","servises/Button/Button.jsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","servises/TextField/TextField.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["let initialState = {\n  name: '',\n  number: '',\n};\nexport default initialState;\n","const fields = {\n  name: {\n    type: 'text',\n    name: 'name',\n    required: true,\n    label: 'User name',\n    placeholder: 'User name',\n  },\n  email: {\n    type: 'email',\n    name: 'email',\n    required: true,\n    label: 'User email',\n    placeholder: 'User email',\n  },\n  password: {\n    type: 'password',\n    name: 'password',\n    required: true,\n    label: 'User password',\n    placeholder: 'User password',\n  },\n};\n\nexport default fields;\n","import initialState from 'components/Form/InitialState';\nimport TextField from 'servises/TextField/TextField';\nimport fields from './fields';\nimport Button from 'servises/Button/Button';\nimport { useState, useCallback } from 'react';\n\nconst RegisterForm = ({ onSubmit }) => {\n  const [state, setState] = useState({ ...initialState });\n\n  const handleChange = useCallback(\n    ({ target }) => {\n      const { name, value } = target;\n      setState(prevState => {\n        return { ...prevState, [name]: value };\n      });\n    },\n    [setState]\n  );\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    onSubmit({ ...state });\n    setState({ ...initialState });\n  };\n\n  const { name, email, password } = state;\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <TextField value={name} onChange={handleChange} {...fields.name} />\n      <TextField value={email} onChange={handleChange} {...fields.email} />\n      <TextField\n        value={password}\n        onChange={handleChange}\n        {...fields.password}\n      />\n      <Button>Register</Button>\n    </form>\n  );\n};\nexport default RegisterForm;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\n\nimport { signup } from 'redux/auth/authOperations';\n\nimport { isUserLogin } from 'redux/auth/authSelectors';\nimport RegisterForm from 'components/RegisterForm/RegisterForm';\n\nconst RegisterPage = () => {\n  const isLogin = useSelector(isUserLogin);\n  const dispatch = useDispatch();\n\n  const handleSignup = data => {\n    dispatch(signup(data));\n  };\n\n  if (isLogin) {\n    return <Navigate to=\"/contacts\" />;\n  }\n\n  return (\n    <div>\n      <RegisterForm onSubmit={handleSignup} />\n    </div>\n  );\n};\nexport default RegisterPage;\n","const Button = ({ children, type = 'submit' }) => {\n  return <button type={type}>{children}</button>;\n};\n\nexport default Button;\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import { useMemo } from 'react';\nimport { nanoid } from 'nanoid';\n\nconst TextField = ({ label, handleChange, ...props }) => {\n  const id = useMemo(() => nanoid(), []);\n\n  return (\n    <div>\n      <label htmlFor={id}>{label}</label>\n      <input id={id} onChange={handleChange} {...props} />\n    </div>\n  );\n};\n\nexport default TextField;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["name","number","type","required","label","placeholder","email","password","onSubmit","useState","initialState","state","setState","handleChange","useCallback","target","value","prevState","event","preventDefault","TextField","onChange","fields","Button","isLogin","useSelector","isUserLogin","dispatch","useDispatch","to","data","signup","children","_objectWithoutProperties","source","excluded","key","i","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","props","id","useMemo","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","nanoid","htmlFor"],"sourceRoot":""}